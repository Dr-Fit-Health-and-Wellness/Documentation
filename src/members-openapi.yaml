---
openapi: 3.0.2

info:
  title: Dr. Fit API
  description: >-
    Dr. Fit API. Meant for enabling application development and customer
    integrations.


    ## Quick Start

    Get a login token:


    ```GET https://members.api.drfit.io/v1/customers/login?email=email&password=password```


    Be sure to set user-agent and provide a valid email and password.


    This will return a token and the customer's data. Now send token in header `Authorization: Bearer <token>` to all requests. See below for endpoints and what they return. Be sure to explore schema view to see descriptions for the data fields.
  version: 0.0.1
  termsOfService: https://drfit.io/index.php?route=legal/terms_of_service
  contact:
    name: Dr. Fit
    email: contact@drfit.io
    url: https://drfit.io/index.php?route=common/contact

tags:
  - name: Account
    description: Everything about accounts - account details, registration, statistics.
  - name: Authentication
    description: Logging in, removing access.
  - name: Catalog
    description: Products, store, categories.
  - name: Orders
    description: Orders and recurring profiles.
  - name: Metabolic and Check-ins
    description: Metabolic data retrieval and editing, submit check-ins.
  - name: Nutrition
    description: Meals, meal plans, WOD meal plans.
  - name: Workouts
    description: Workouts, exercises, WOD workouts.

externalDocs:
  description: Official API documentation repository
  url: https://github.com/Dr-Fit-Health-and-Wellness/Kinship

servers:
  - url: https://members.api.drfit.io/{basePath}
    description: Production server
    variables:
      basePath:
        default: v1
        description: The base path of the API. Reflects the version to use.
  - url: https://members.api.sandbox.dev.drfit.io/{basePath}
    description: Development sandbox server
    variables:
      basePath:
        default: v1
        description: The base path of the API. Reflects the version to use.
  - url: https://localhost:44300/members/index.php?route={basePath}
    description: Local development server
    variables:
      basePath:
        default: api/v1
        description: The base path of the API. Reflects the version to use.

paths:
  # ##########################################
  # Authentication
  # ##########################################

  "/auth/tokens":
    get:
      summary: Generate a new API key for a customer.
      description: Generate a new API key for a customer given a customer's email and password.
      tags:
        - Authentication
      operationId: authToken
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A new API key was created and returned.
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    properties:
                      api_key:
                        type: string
                        description: The new API key. It is a 256-bit string of numbers and mixed-case letters. Will be 128 characters long.
                        example: abcd1234
                      customer:
                        type: object
                        "$ref": "#/components/schemas/Customer"
          headers:
            X-Rate-Limit:
              description: Call per hour allowed per the token.
              schema:
                type: integer
                format: int32
                example: 1000
            X-Expires-After:
              description: Date in UTC when the token expires.
              schema:
                type: string
                format: date-time
                example: 2020-01-01T00:00:00Z
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

    delete:
      summary: Delete all API keys for a customer.
      description: Delete all API keys for a customer.
      tags:
        - Authentication
      operationId: authTokenDeleteAll
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: The API key was deleted.
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    properties:
                      count_deleted:
                        type: integer
                        description: The number of API keys deleted.
                        example: 1
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/auth/tokens/_{token}":
    delete:
      summary: Delete an API key for a customer.
      description: Delete an API key for a customer.
      tags:
        - Authentication
      operationId: authTokenDelete
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - $ref: "#/components/parameters/ApiToken"
      responses:
        "200":
          description: The API key was deleted.
          content:
            application/json:
              schema:
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    properties:
                      count_deleted:
                        type: integer
                        description: The number of API keys deleted.
                        example: 1
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/auth/tokens/_{token}/renew":
    get:
      summary: Renew an API key for a customer.
      description: Renew an API key for a customer.
      tags:
        - Authentication
      operationId: authTokenRenew
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - $ref: "#/components/parameters/ApiToken"
      responses:
        "200":
          description: The API key was renewed.
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/DataModel"
          headers:
            X-Rate-Limit:
              description: Call per hour allowed per the token.
              schema:
                type: integer
                format: int32
                example: 1000
            X-Expires-After:
              description: Date in UTC when the token expires.
              schema:
                type: string
                format: date-time
                example: 2020-01-01T00:00:00Z
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  # ##########################################
  # Customers and accounts
  # ##########################################

  "/customers":
    get:
      summary: Get a customer's details.
      description: Get the current customer's basic information, including account and recent metabolic data. Requires that the customer is logged in.
      tags:
        - Account
      operationId: customer
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: Customer is logged in and exists.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Customer"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"
    patch:
      summary: Partially update this customer's fields.
      description: Apply a partial update to a customer, editing it's customer fields or account fields. Metabolic data fields cannot be modified here. Some fields, like IDs, cannot be modified.
      tags:
        - Account
      operationId: customerPatch
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/CustomerMutable"
          application/json:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/CustomerMutable"
      responses:
        "200":
          description: Customer updated. Modified customer is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Customer"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/customers/_{customer_id}":
    get:
      summary: Get a specific customer's details.
      description: Get the referenced customer's basic information, including account and recent metabolic data. Requires that the customer is logged in and has access. Customers only should have access to themselves.
      tags:
        - Account
      operationId: customerGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - $ref: "#/components/parameters/CustomerId"
      responses:
        "200":
          description: Customer is logged in and exists.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Customer"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"
    patch:
      summary: Partially update a customer's fields.
      description: Apply a partial update to a customer, editing it's customer fields or account fields. Metabolic data fields cannot be modified here. Some fields, like IDs, cannot be modified.
      tags:
        - Account
      operationId: customerPatch
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - $ref: "#/components/parameters/CustomerId"
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/CustomerMutable"
          application/json:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/CustomerMutable"
      responses:
        "200":
          description: Customer updated. Modified customer is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Customer"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/customers/statistics":
    get:
      summary: Get basic dashboard statistics.
      description: Get basic statistics about the current customer. Requires that the customer is logged in.
      tags:
        - Account
      operationId: customerStatistics
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: Customer is logged in.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    properties:
                      points:
                        description: Current number of Dr. Fit points. Not to be confused with reward points.
                        type: integer
                        format: int32
                        example: 1000
                      num_completed_workouts:
                        description: The number of completed workouts.
                        type: integer
                        format: int32
                        example: 10
                      num_completed_exercises:
                        description: The number of completed exercises.
                        type: integer
                        format: int32
                        example: 20
                      num_completed_workouts_week:
                        description: The number of completed workouts this week.
                        type: integer
                        format: int32
                        example: 40
                      num_completed_exercises_week:
                        description: The number of completed exercises this week.
                        type: integer
                        format: int32
                        example: 30
                      most_viewed_workouts:
                        description: The most viewed workouts.
                        type: array
                        items:
                          type: object
                          properties:
                            workout_id:
                              description: The workout ID.
                              type: integer
                              format: int32
                              example: 1
                            title:
                              description: The workout name.
                              type: string
                              example: "Push-ups"
                            num_views:
                              description: The number of views.
                              type: integer
                              format: int32
                              example: 100
                      most_viewed_exercises:
                        description: The most viewed exercises.
                        type: array
                        items:
                          type: object
                          properties:
                            exercise_id:
                              description: The exercise ID.
                              type: integer
                              format: int32
                              example: 1
                            title:
                              description: The exercise name.
                              type: string
                              example: "Push-ups"
                            num_views:
                              description: The number of views.
                              type: integer
                              format: int32
                              example: 100
                      most_viewed_meal_plans:
                        description: The most viewed meal plans.
                        type: array
                        items:
                          type: object
                          properties:
                            meal_plan_id:
                              description: The meal plan ID.
                              type: integer
                              format: int32
                              example: 1
                            title:
                              description: The meal plan name.
                              type: string
                              example: "Push-ups"
                            num_views:
                              description: The number of views.
                              type: integer
                              format: int32
                              example: 100
                      most_viewed_meals:
                        description: The most viewed meals.
                        type: array
                        items:
                          type: object
                          properties:
                            meal_id:
                              description: The meal ID.
                              type: integer
                              format: int32
                              example: 1
                            title:
                              description: The meal name.
                              type: string
                              example: "Push-ups"
                            num_views:
                              description: The number of views.
                              type: integer
                              format: int32
                              example: 100
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/messages/_{user_id}":
    get:
      summary: Get messages between a user and a customer.
      description: Get the messages between a user and a customer. Requires that the customer is logged in and has access. Get possible user IDs via `/coaches`.
      tags:
        - Account
      operationId: messagesGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: user_id
          in: path
          description: User ID to get messages for.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Customer is logged in and exists.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    properties:
                      messages:
                        description: The messages.
                        type: array
                        items:
                          "$ref": "#/components/schemas/Message"
                      next_page:
                        description: The next page of messages.
                        type: integer
                        format: int32
                        example: 3
                        nullable: true
                      previous_page:
                        description: The previous page of messages.
                        type: integer
                        format: int32
                        example: 1
                        nullable: true
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/coaches":
    get:
      summary: Get a list of this user's coaches.
      description: Get a list of all coaches. Requires that the customer is logged in and has access.
      tags:
        - Account
      operationId: coachesGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: Customer is logged in and exists.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    properties:
                      coaches:
                        description: The users.
                        type: array
                        items:
                          "$ref": "#/components/schemas/User"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/coaches/_{user_id}":
    get:
      summary: Get the information of a specific coach.
      description: Get the information of a specific coach. Requires that the customer is logged in and has access.
      tags:
        - Account
      operationId: coachGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: user_id
          in: path
          description: User ID to get messages for.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Customer is logged in and exists.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/User"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  # ##########################################
  # Metabolic and check-ins
  # ##########################################

  "/check_ins/metabolic_entries":
    get:
      summary: Get a customer's metabolic entries.
      description: Get the current customer's metabolic entries. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: metabolicEntriesGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A list of metabolic entries.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/MetabolicData"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"
    post:
      summary: Create a new metabolic entry.
      description: Create a new metabolic entry. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: metabolicEntriesPost
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/MetabolicDataMutable"
          application/x-www-form-urlencoded:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/MetabolicDataMutable"
          multipart/form-data:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/MetabolicDataMutable"
      responses:
        "201":
          description: Metabolic entry created.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/MetabolicData"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/check_ins/metabolic_entries/_{metabolic_entry_id}":
    get:
      summary: Get a specific customer's metabolic entry.
      description: Get a specific customer's metabolic entry. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: metabolicEntriesGetByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: metabolic_entry_id
          in: path
          description: Metabolic entry ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A metabolic entry.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/MetabolicData"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"
    patch:
      summary: Edit a metabolic entry.
      description: Edit a metabolic entry. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: metabolicEntriesPatchByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: metabolic_entry_id
          in: path
          description: Metabolic entry ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/MetabolicDataMutable"
          application/x-www-form-urlencoded:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/MetabolicDataMutable"
          multipart/form-data:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/MetabolicDataMutable"
      responses:
        "200":
          description: Metabolic entry edited.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"
    delete:
      summary: Delete a metabolic entry.
      description: Delete a metabolic entry. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: metabolicEntriesDeleteByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: metabolic_entry_id
          in: path
          description: Metabolic entry ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Metabolic entry deleted.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/MetabolicData"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/check_ins/timeline_entries":
    get:
      summary: Get a customer's timeline entries.
      description: Get the current customer's timeline entries. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: timelineEntriesGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A list of timeline entries.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/TimelineEntry"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"
    post:
      summary: Create a new timeline entry.
      description: Create a new timeline entry. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: timelineEntriesPost
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/TimelineEntryMutable"
      responses:
        "201":
          description: Timeline entry created.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/TimelineEntry"
            application/x-www-form-urlencoded:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/TimelineEntry"
            multipart/form-data:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/TimelineEntry"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/check_ins/timeline_entries/_{timeline_entry_id}":
    get:
      summary: Get a specific customer's timeline entry.
      description: Get a specific customer's timeline entry. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: timelineEntriesGetByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: timeline_entry_id
          in: path
          description: Timeline entry ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A timeline entry.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/TimelineEntry"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"
    patch:
      summary: Edit a timeline entry.
      description: Edit a timeline entry. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: timelineEntriesPatchByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: timeline_entry_id
          in: path
          description: Timeline entry ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/TimelineEntryMutable"
          application/x-www-form-urlencoded:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/TimelineEntryMutable"
          multipart/form-data:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/TimelineEntryMutable"
      responses:
        "200":
          description: Timeline entry edited.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"
    delete:
      summary: Delete a timeline entry.
      description: Delete a timeline entry. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: timelineEntriesDeleteByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: timeline_entry_id
          in: path
          description: Timeline entry ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Timeline entry deleted.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/TimelineEntry"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/check_ins/journal_entries":
    get:
      summary: Get a customer's journal entries.
      description: Get the current customer's journal entries. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: journalEntriesGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A list of journal entries.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/JournalEntry"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"
    post:
      summary: Create a new journal entry.
      description: Create a new journal entry. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: journalEntriesPost
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/JournalEntryMutable"
      responses:
        "201":
          description: Journal entry created.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/JournalEntry"
            application/x-www-form-urlencoded:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/JournalEntry"
            multipart/form-data:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/JournalEntry"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/check_ins/journal_entries/_{journal_entry_id}":
    get:
      summary: Get a specific customer's journal entry.
      description: Get a specific customer's journal entry. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: journalEntriesGetByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: journal_entry_id
          in: path
          description: Journal entry ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A journal entry.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/JournalEntry"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"
    patch:
      summary: Edit a journal entry.
      description: Edit a journal entry. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: journalEntriesPatchByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: journal_entry_id
          in: path
          description: Journal entry ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/JournalEntryMutable"
          application/x-www-form-urlencoded:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/JournalEntryMutable"
          multipart/form-data:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/JournalEntryMutable"
      responses:
        "200":
          description: Journal entry edited.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"
    delete:
      summary: Delete a journal entry.
      description: Delete a journal entry. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: journalEntriesDeleteByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: journal_entry_id
          in: path
          description: Journal entry ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Journal entry deleted.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/JournalEntry"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/check_ins":
    get:
      summary: Get a list of check-in submissions.
      description: Get a list of check-ins. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: checkInsGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A list of check-ins.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      "$ref": "#/components/schemas/CheckIn"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"
    post:
      summary: Submit a new check-in.
      description: Create a new check-in. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: checkInsPost
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/CheckInMutable"
          application/x-www-form-urlencoded:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/CheckInMutable"
          multipart/form-data:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/CheckInMutable"
      responses:
        "201":
          description: Check-in created.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/CheckIn"
    patch:
      summary: Modify a check-in.
      description: Modify a new check-in. Requires that the customer is logged in.
      tags:
        - Metabolic and Check-ins
      operationId: checkInsPost
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: check_in_id
          in: path
          description: Check-in ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/CheckInMutable"
          application/x-www-form-urlencoded:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/CheckInMutable"
          multipart/form-data:
            schema:
              type: object
              allOf:
                - "$ref": "#/components/schemas/CheckInMutable"
      responses:
        "201":
          description: Check-in modified.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/CheckIn"

  # ##########################################
  # Products
  # ##########################################

  "/products":
    get:
      summary: Get a list of products.
      description: Get a list of products.
      tags:
        - Catalog
      operationId: productsGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A list of products.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  products:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Product"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/products/_{product_id}":
    get:
      summary: Get a product.
      description: Get a product.
      tags:
        - Catalog
      operationId: productsGetByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: product_id
          in: path
          description: Product ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A product.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Product"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/products/_{product_id}/reviews":
    get:
      summary: Get a list of reviews for a product.
      description: Get a list of reviews for a product.
      tags:
        - Catalog
      operationId: reviewsGetByProductID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: product_id
          in: path
          description: Product ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A list of reviews.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    properties:
                      reviews:
                        type: array
                        items:
                          "$ref": "#/components/schemas/Review"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/categories":
    get:
      summary: Get a list of categories.
      description: Get a list of categories.
      tags:
        - Catalog
      operationId: categoriesGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A list of categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Category"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/categories/_{category_id}/products":
    get:
      summary: Get a list of products in a category.
      description: Get a list of products in a category.
      tags:
        - Catalog
      operationId: productsGetByCategory
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: category_id
          in: path
          description: Category ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A list of products in the category.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Product"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/informations":
    get:
      summary: Get a list of informations.
      description: Get a list of informations.
      tags:
        - Catalog
      operationId: informationsGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A list of informations.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Information"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  # ##########################################
  # Orders
  # ##########################################

  "/orders":
    get:
      summary: Get a list of orders.
      description: Get a list of orders. The current user must be a registered customer.
      tags:
        - Orders
      operationId: ordersGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A list of orders.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Order"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/orders/_{order_id}":
    get:
      summary: Get an order.
      description: Get an order. The current user must be a registered customer.
      tags:
        - Orders
      operationId: ordersGetByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: order_id
          in: path
          description: Order ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: An order.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Order"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/orders/_{order_id}/downloads":
    get:
      summary: Get a list of downloads for an order.
      description: Get a list of downloads for an order. The current user must be a registered customer.
      tags:
        - Orders
      operationId: downloadsGetByOrderID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: order_id
          in: path
          description: Order ID to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A list of downloads.
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Download"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  # ##########################################
  # Workouts
  # ##########################################

  "/workouts":
    get:
      summary: Get a list of workouts.
      description: Get a list of workouts for the current customer. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: workoutsGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A list of workouts is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Workout"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/workouts/_{workout_id}":
    get:
      summary: Get a specific workout.
      description: Get a specific workout for the current customer. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: workoutsGetByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: workout_id
          in: path
          description: The ID of the workout to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A workout is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Workout"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/workouts/_{workout_id}/views":
    description: Mark a workout as viewed.
    post:
      summary: Mark a workout as viewed.
      description: Mark a workout as viewed. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: workoutsView
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: workout_id
          in: path
          description: The ID of the workout to mark as viewed.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Workout marked as viewed.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Workout"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/workouts/_{workout_id}/exercises":
    get:
      summary: Get a list of exercises for a workout.
      description: Get a list of exercises for a workout for the current customer. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: workoutsExercisesGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: workout_id
          in: path
          description: The ID of the workout to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A list of exercises is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Exercise"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/workouts/_{workout_id}/exercises/_{exercise_id}":
    get:
      summary: Get a specific exercise for a workout.
      description: Get a specific exercise for a workout for the current customer. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: workoutsExercisesGetByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: workout_id
          in: path
          description: The ID of the workout to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
        - name: exercise_id
          in: path
          description: The ID of the exercise to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A exercise is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Exercise"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/workouts/_{workout_id}/exercises/_{exercise_id}/completions":
    description: Mark an exercise for a workout as completed.
    post:
      summary: Mark an exercise for a workout as completed.
      description: Mark an exercise for a workout as completed. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: workoutExercisesComplete
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: workout_id
          in: path
          description: The ID of the workout to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
        - name: exercise_id
          in: path
          description: The ID of the exercise for a workout to mark as completed.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Exercise marked as completed.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    properties:
                      next_workout_id:
                        type: string
                        nullable: true
                        description: The ID of the next workout. Can be null if this is the last workout or if the exercise is not part of a distinct workout.
                        "$ref": "#/components/schemas/SystemID"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/workouts/_{workout_id}/exercises/_{exercise_id}/views":
    description: Mark an exercise for a workout as viewed.
    post:
      summary: Mark an exercise for a workout as viewed.
      description: Mark an exercise for a workout as viewed. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: workoutsExercisesView
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: workout_id
          in: path
          description: The ID of the workout to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
        - name: exercise_id
          in: path
          description: The ID of the exercise to mark as viewed.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Exercise marked as viewed.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Exercise"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/exercises":
    get:
      summary: Get a list of exercises.
      description: Get a list of exercises for the current customer. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: exercisesGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A list of exercises is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Exercise"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/exercises/_{exercise_id}":
    get:
      summary: Get a specific exercise.
      description: Get a specific exercise for the current customer. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: exercisesGetByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: exercise_id
          in: path
          description: The ID of the exercise to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A exercise is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Exercise"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/exercises/_{exercise_id}/completions":
    description: Mark an exercise as completed.
    post:
      summary: Mark an exercise as completed.
      description: Mark an exercise as completed. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: exercisesComplete
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: exercise_id
          in: path
          description: The ID of the exercise to mark as completed.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Exercise marked as completed.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    properties:
                      next_workout_id:
                        type: string
                        nullable: true
                        description: The ID of the next workout. Can be null if this is the last workout or if the exercise is not part of a distinct workout.
                        "$ref": "#/components/schemas/SystemID"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/exercises/_{exercise_id}/views":
    description: Mark an exercise as viewed.
    post:
      summary: Mark an exercise as viewed.
      description: Mark an exercise as viewed. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: exercisesView
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: exercise_id
          in: path
          description: The ID of the exercise to mark as viewed.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Exercise marked as viewed.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Exercise"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/wods":
    get:
      summary: Get a list of WODs.
      description: Get a list of WODs for the current customer. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: wodsGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A list of WODs is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/WOD"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/wods/_{wod_id}/workouts":
    get:
      summary: Get a list of workouts for a WOD.
      description: Get a list of workouts for a WOD for the current customer. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: wodsWorkoutsGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: wod_id
          in: path
          description: The ID of the WOD to get.
          required: true
          schema:
            type: string
            description: Date of the WOD to get. Should be in the format yyyy-mm-dd.
            example: "2020-01-01"
      responses:
        "200":
          description: A list of workouts is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Workout"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/wods/_{wod_id}/workouts/_{workout_id}":
    get:
      summary: Get a specific workout from a WOD.
      description: Get a specific workout from a WOD for the current customer. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: wodsWorkoutsGetByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: wod_id
          in: path
          description: The ID of the WOD to get.
          required: true
          schema:
            type: string
            description: Date of the WOD to get. Should be in the format yyyy-mm-dd.
            example: "2020-01-01"
        - name: workout_id
          in: path
          description: The ID of the workout to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A workout is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Workout"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/wods/_{wod_id}/workouts/_{workout_id}/views":
    description: Mark a workout in a WOD as viewed.
    post:
      summary: Mark a workout in a WOD as viewed.
      description: Mark a workout in a WOD as viewed. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: wodsWorkoutsView
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: wod_id
          in: path
          description: The ID of the WOD to get.
          required: true
          schema:
            type: string
            description: Date of the WOD to get. Should be in the format yyyy-mm-dd.
            example: "2020-01-01"
        - name: workout_id
          in: path
          description: The ID of the workout to mark as viewed.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Workout marked as viewed.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Workout"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/wods/_{wod_id}/workouts/_{workout_id}/exercises":
    get:
      summary: Get a list of exercises for a workout in a WOD.
      description: Get a list of exercises for a workout in a WOD for the current customer. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: wodsWorkoutsExercisesGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: wod_id
          in: path
          description: The ID of the WOD to get.
          required: true
          schema:
            type: string
            description: Date of the WOD to get. Should be in the format yyyy-mm-dd.
            example: "2020-01-01"
        - name: workout_id
          in: path
          description: The ID of the workout to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A list of exercises is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Exercise"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/wods/_{wod_id}/workouts/_{workout_id}/exercises/_{exercise_id}":
    get:
      summary: Get a specific exercise for a workout in a WOD.
      description: Get a specific exercise for a workout in a WOD for the current customer. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: wodsWorkoutsExercisesGetByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: wod_id
          in: path
          description: The ID of the WOD to get.
          required: true
          schema:
            type: string
            description: Date of the WOD to get. Should be in the format yyyy-mm-dd.
            example: "2020-01-01"
        - name: workout_id
          in: path
          description: The ID of the workout to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
        - name: exercise_id
          in: path
          description: The ID of the exercise to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A exercise is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Exercise"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/wods/_{wod_id}/workouts/_{workout_id}/exercises/_{exercise_id}/completions":
    description: Mark an exercise for a workout in a WOD as completed.
    post:
      summary: Mark an exercise for a workout in a WOD as completed.
      description: Mark an exercise for a workout in a WOD as completed. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: workoutExercisesComplete
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: wod_id
          in: path
          description: The ID of the WOD to get.
          required: true
          schema:
            type: string
            description: Date of the WOD to get. Should be in the format yyyy-mm-dd.
            example: "2020-01-01"
        - name: workout_id
          in: path
          description: The ID of the workout to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
        - name: exercise_id
          in: path
          description: The ID of the exercise for a workout to mark as completed.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Exercise marked as completed.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    properties:
                      next_workout_id:
                        type: string
                        nullable: true
                        description: The ID of the next workout. Can be null if this is the last workout or if the exercise is not part of a distinct workout.
                        "$ref": "#/components/schemas/SystemID"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/wods/_{wod_id}/workouts/_{workout_id}/exercises/_{exercise_id}/views":
    description: Mark an exercise for a workout in a WOD as viewed.
    post:
      summary: Mark an exercise for a workout in a WOD as viewed.
      description: Mark an exercise for a workout in a WOD as viewed. Requires that the customer is logged in.
      tags:
        - Workouts
      operationId: wodsWorkoutsExercisesView
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: wod_id
          in: path
          description: The ID of the WOD to get.
          required: true
          schema:
            type: string
            description: Date of the WOD to get. Should be in the format yyyy-mm-dd.
            example: "2020-01-01"
        - name: workout_id
          in: path
          description: The ID of the workout to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
        - name: exercise_id
          in: path
          description: The ID of the exercise to mark as viewed.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Exercise marked as viewed.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Exercise"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/meals":
    get:
      summary: Get a list of meals.
      description: Get a list of meals for the current customer. Requires that the customer is logged in.
      tags:
        - Nutrition
      operationId: mealsGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A list of meals is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Meal"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/meals/_{meal_id}":
    get:
      summary: Get a specific meal.
      description: Get a specific meal for the current customer. Requires that the customer is logged in.
      tags:
        - Nutrition
      operationId: mealsGetByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: meal_id
          in: path
          description: The ID of the meal to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A meal is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Meal"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/meals/_{meal_id}/views":
    description: Mark an meal as viewed.
    post:
      summary: Mark an meal as viewed.
      description: Mark an meal as viewed. Requires that the customer is logged in.
      tags:
        - Nutrition
      operationId: mealsView
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: meal_id
          in: path
          description: The ID of the meal to mark as viewed.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Meal marked as viewed.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Meal"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/meal_plans":
    get:
      summary: Get a list of meal plans.
      description: Get a list of meal plans for the current customer. Requires that the customer is logged in.
      tags:
        - Nutrition
      operationId: mealPlansGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
      responses:
        "200":
          description: A list of meal plans is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/MealPlan"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/meal_plans/_{meal_plan_id}/meals":
    get:
      summary: Get a list of meals per a meal plan.
      description: Get a list of meals per a meal plan for the current customer. Requires that the customer is logged in.
      tags:
        - Nutrition
      operationId: mealPlanMealsGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: meal_plan_id
          in: path
          description: The ID of the meal plan to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A list of meals is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Meal"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/meal_plans/_{meal_plan_id}/meals/_{meal_id}":
    get:
      summary: Get a specific meal per a meal plan.
      description: Get a specific meal per a meal plan for the current customer. Requires that the customer is logged in.
      tags:
        - Nutrition
      operationId: mealPlanMealsGetByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: meal_plan_id
          in: path
          description: The ID of the meal plan to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
        - name: meal_id
          in: path
          description: The ID of the meal to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A meal is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Meal"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/meal_plans/_{meal_plan_id}/meals/_{meal_id}/views":
    description: Mark an meal per a meal plan as viewed.
    post:
      summary: Mark an meal per a meal plan as viewed.
      description: Mark an meal per a meal plan as viewed. Requires that the customer is logged in.
      tags:
        - Nutrition
      operationId: mealPlanMealsView
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: meal_plan_id
          in: path
          description: The ID of the meal plan to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
        - name: meal_id
          in: path
          description: The ID of the meal to mark as viewed.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Meal marked as viewed.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Meal"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/wods/_{wod_id}/meal_plans":
    get:
      summary: Get a list of meal plans per a WOD.
      description: Get a list of meal plans per a WOD for the current customer. Requires that the customer is logged in.
      tags:
        - Nutrition
      operationId: wodMealPlansGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: wod_id
          in: path
          description: The ID of the WOD to get.
          required: true
          schema:
            type: string
            description: Date of the WOD to get. Should be in the format yyyy-mm-dd.
            example: "2020-01-01"
      responses:
        "200":
          description: A list of meal plans per a WOD is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/MealPlan"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/wods/_{wod_id}/meal_plans/_{meal_plan_id}/meals":
    get:
      summary: Get a list of meals per a meal plan per a WOD.
      description: Get a list of meals per a meal plan per a WOD for the current customer. Requires that the customer is logged in.
      tags:
        - Nutrition
      operationId: wodMealPlanMealsGet
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: wod_id
          in: path
          description: The ID of the WOD to get.
          required: true
          schema:
            type: string
            description: Date of the WOD to get. Should be in the format yyyy-mm-dd.
            example: "2020-01-01"
        - name: meal_plan_id
          in: path
          description: The ID of the meal plan to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A list of meals is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Meal"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/wods/_{wod_id}/meal_plans/_{meal_plan_id}/meals/_{meal_id}":
    get:
      summary: Get a specific meal per a meal plan per a WOD.
      description: Get a specific meal per a meal plan per a WOD for the current customer. Requires that the customer is logged in.
      tags:
        - Nutrition
      operationId: wodMealPlanMealsGetByID
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: wod_id
          in: path
          description: The ID of the WOD to get.
          required: true
          schema:
            type: string
            description: Date of the WOD to get. Should be in the format yyyy-mm-dd.
            example: "2020-01-01"
        - name: meal_plan_id
          in: path
          description: The ID of the meal plan to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
        - name: meal_id
          in: path
          description: The ID of the meal to get.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: A meal is returned.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Meal"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

  "/wods/_{wod_id}/meal_plans/_{meal_plan_id}/meals/_{meal_id}/views":
    description: Mark an meal per a meal plan per a WOD as viewed.
    post:
      summary: Mark an meal per a meal plan per a WOD as viewed.
      description: Mark an meal per a meal plan per a WOD as viewed. Requires that the customer is logged in.
      tags:
        - Nutrition
      operationId: wodMealPlanMealsView
      parameters:
        - $ref: "#/components/parameters/UserAgent"
        - name: wod_id
          in: path
          description: The ID of the WOD to get.
          required: true
          schema:
            type: string
            description: Date of the WOD to get. Should be in the format yyyy-mm-dd.
            example: "2020-01-01"
        - name: meal_plan_id
          in: path
          description: The ID of the meal plan to operate on.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
        - name: meal_id
          in: path
          description: The ID of the meal to mark as viewed.
          required: true
          schema:
            allOf:
              - "$ref": "#/components/schemas/SystemID"
      responses:
        "200":
          description: Meal marked as viewed.
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - "$ref": "#/components/schemas/DataModel"
                properties:
                  data:
                    type: object
                    "$ref": "#/components/schemas/Meal"
        "401":
          "$ref": "#/components/responses/Unauthorized"
        "404":
          "$ref": "#/components/responses/NotFound"
        "426":
          "$ref": "#/components/responses/Insecure"
        "429":
          "$ref": "#/components/responses/RateLimited"

components:
  parameters:
    UserAgent:
      name: user_agent
      in: header
      description: The user agent string. This is used to identify the client. Should be a string of the form "App Name/Version".
      required: true
      schema:
        type: string
        example: "Dr. Fit/1.0.0"

    ApiToken:
      name: token
      in: path
      description: API token.
      required: true
      schema:
        type: string
        example: foNf083DF

    CustomerId:
      name: customer_id
      in: path
      description: A customer's ID.
      required: true
      schema:
        type: integer
        format: int32
        example: 34

  responses:
    "Unauthorized":
      description: Incorrect credentials or account doesn't exist.
      content:
        application/json:
          schema:
            allOf:
              - "$ref": "#/components/schemas/ErrorsModel"
            properties:
              code:
                type: integer
                format: int32
                description: The error code.
                example: 401
              message:
                type: string
                description: The error message.
                example: "Incorrect credentials or account doesn't exist."
    "Insecure":
      description: Insecure methods not allowed. Upgrade to HTTPS.
      content:
        application/json:
          schema:
            allOf:
              - "$ref": "#/components/schemas/ErrorsModel"
            properties:
              code:
                type: integer
                format: int32
                description: The error code.
                example: 426
              message:
                type: string
                description: The error message.
                example: "Insecure methods not allowed. Upgrade to HTTPS."
    "RateLimited":
      description: Too many authentication requests. This rate limit is lower than most others for security.
      content:
        application/json:
          schema:
            allOf:
              - "$ref": "#/components/schemas/ErrorsModel"
            properties:
              code:
                type: integer
                format: int32
                description: The error code.
                example: 429
              message:
                type: string
                description: The error message.
                example: "Too many requests."
    "NotFound":
      description: The requested resource does not exist or could not be found.
      content:
        application/json:
          schema:
            allOf:
              - "$ref": "#/components/schemas/ErrorsModel"
            properties:
              code:
                type: integer
                format: int32
                description: The error code.
                example: 404
              message:
                type: string
                description: The error message.
                example: "The requested resource does not exist or could not be found."
    default:
      description: An unexpected error occurred.
      content:
        application/json:
          schema:
            allOf:
              - "$ref": "#/components/schemas/ErrorsModel"

  schemas:
    SystemID:
      type: integer
      format: int32
      description: Internal ID used to reference this object.
      example: 1234

    HasThumbnails:
      type: object
      properties:
        thumbnail_image_small_url:
          type: string
          description: A smaller thumbnail for this resource.
          example: https://example.com/image-s.jpg
        thumbnail_image_url:
          type: string
          description: The full size thumbnail.
          example: https://example.com/image.jpg

    AccessRestrictions:
      type: object
      description: This resource is restricted for certain users. This object contains the restriction type and whether or not this customer has access.
      properties:
        access_workout_tier:
          type: integer
          format: int32
          description: The workout tier this resource is restricted to.
          example: 1
        access_nutrition_tier:
          type: integer
          format: int32
          description: The nutrition tier this resource is restricted to.
          example: 1
        allowed_tiers:
          type: array
          description: Access tiers that can access this resource.
          items:
            type: string
            example: ultimate
        has_access:
          type: boolean
          description: Whether or not the customer has access.
          example: true

    # ##########################################
    # Account and customer
    # ##########################################

    Address:
      description: An address.
      type: object
      properties:
        first_name:
          type: string
          description: The first name of the customer.
          example: John
        last_name:
          type: string
          description: The last name of the customer.
          example: Doe
        address_1:
          type: string
          description: The first line of the address.
          example: 123 Main St.
        address_2:
          type: string
          description: The second line of the address.
          example: Apt. 1
        city:
          type: string
          description: The city of the address.
          example: New York
        postcode:
          type: string
          description: The postcode of the address.
          example: 10001
        country:
          type: string
          description: The country of the address.
          example: USA
        country_id:
          description: The ID of the country.
          allOf:
            - "$ref": "#/components/schemas/SystemID"
        zone:
          type: string
          description: The state or province of the address.
          example: New York
        zone_id:
          description: The ID of the state or province.
          allOf:
            - "$ref": "#/components/schemas/SystemID"
        address_format:
          type: string
          description: The format of the address.
          example: "{first_name} {last_name}..."

    AccountMutable:
      description: Mutable fields for a customer account.
      type: object
      properties:
        handle:
          type: string
          description: The account's username.
          example: drfit
        points:
          type: integer
          format: int32
          description: The account's current number of points.
          example: 54
        bio:
          type: string
          description: The account's bio.
          example: I am a fitness enthusiast.
        goal:
          type: string
          description: The account's goal, which corresponds to a specific option. Should be empty, "option-1", "option-2", or "option-3".
          example: option-1
        check_in_frequency:
          type: integer
          format: int32
          description: The account's check-in frequency in number of days.
          example: 7
        check_in_offset:
          type: integer
          format: int32
          description: The account's first check-in offset in days from `last_login`, which is used to calculate which day the check-ins started. For weekly schedules, it affects the start day. Otherwise, it affects the first day of the cycle, which could "shift" every day by some number.
          example: 1
        check_in_buffer:
          type: integer
          format: int32
          description: The account's check-in buffer in days. This is the number of days until a member's check-in is considered to be late.
          example: 3
        preferences:
          type: object
          description: The unstructured dump of the account's preferences and supplementary data.

    Account:
      description: A customer's extra account information. An account differs from customer in that account is only for the personal training service, whereas customer is a general user that can make purchases.
      type: object
      allOf:
        - "$ref": "#/components/schemas/AccountMutable"
      properties:
        account_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The account's internal ID.
        metabolic:
          nullable: true
          "$ref": "#/components/schemas/MetabolicData"
        profile_img:
          type: string
          description: The account's profile image.
          example: https://drfit.io/image/cache/profile/7da18387cb2bd08846ef1d8fdefba4e0a4ef2395f708781d60acbe974c819d16.png
        last_login:
          type: string
          format: date-time
          description: The account's last login.
          example: 2020-01-01T00:00:00+00:00

    CustomerMutable:
      description: Mutable customer fields.
      type: object
      properties:
        first_name:
          type: string
          description: The customer's first name.
          example: John
        last_name:
          type: string
          description: The customer's last name.
          example: Doe
        email:
          type: string
          description: The customer's email address.
          example: john.doe@example.com
        telephone:
          type: string
          description: The customer's telephone number.
          example: +15555555555
        newsletter:
          type: boolean
          description: Whether the customer wants to receive emails from Dr. Fit.
          example: true
        account:
          type: object
          description: The customer's account details. This can be null in very specific cases, such as if the customer first registers on the catalog module and then moves to the members module.
          nullable: true
          "$ref": "#/components/schemas/AccountMutable"

    Customer:
      description: Customer data as returned from the API.
      type: object
      allOf:
        - "$ref": "#/components/schemas/CustomerMutable"
      properties:
        customer_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The customer's internal ID.
        customer_group_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The customer group ID. Currently not used. Will be 1 in most cases.
          example: 1
        address_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The customer's address ID. Defaults to 0, which means the customer has no address.
          example: 3
        ip:
          type: string
          description: The customer's most recently used IP address.
          example: 127.0.0.1
        account_type:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The customer's account type (basic workout, pro, etc.) represented as the account type ID.
          example: 4
        account:
          type: object
          description: The customer's account details. This can be null in very specific cases, such as if the customer first registers on the catalog module and then moves to the members module.
          nullable: true
          "$ref": "#/components/schemas/Account"

    # ##########################################
    # Metabolic, check-ins, coaches
    # ##########################################

    MetabolicDataMutable:
      description: Mutable fields of metabolic data (height, weight, gender) used to record progress and calculate values like BMR and TEE.
      type: object
      properties:
        gender:
          type: string
          description: The associated gender used for calculating basal metabolic rate (BMR) and total energy expenditure (TEE). Is either "male" or "female".
          example: female
        height:
          type: number
          format: float
          description: The recorded height in centimeters (cm).
          example: 162.3
        weight:
          type: number
          format: float
          description: The recorded weight in kilograms (kg).
          example: 70.0
        age:
          type: integer
          format: int32
          description: The recorded age in years.
          example: 25

    MetabolicData:
      description: Metabolic data (height, weight, gender) used to record progress and calculate values like BMR and TEE.
      type: object
      allOf:
        - "$ref": "#/components/schemas/MetabolicDataMutable"
      properties:
        metabolic_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the metabolic data.
          example: 112
        datetime_added:
          type: string
          format: date-time
          description: The date the metabolic data was last added or updated.
          example: 2020-01-01T00:00:00+00:00

    TimelineEntryMutable:
      description: Mutable fields for a timeline entry, which is a photo upload meant to show someone's physical progress. Not included here is the image itself, which should be uploaded in the event that this is a new entry.
      type: object
      properties:
        name:
          type: string
          description: The title of the timeline entry.
          example: Me after one week
        body:
          type: string
          description: The description of the timeline entry.
          example: Feeling good.
        private:
          type: boolean
          description: Whether the timeline entry is private and not to be shared with coaches. If true, the entry can only be seen by the customer.
          example: true
        image:
          type: string
          description: The image data. Will be a base64 encoded string.
          nullable: true
        image_type:
          type: string
          description: The image type. Can be a mime type or an extension.
          nullable: true

    TimelineEntry:
      description: A photo upload meant to show someone's physical progress.
      allOf:
        - "$ref": "#/components/schemas/TimelineEntryMutable"
      type: object
      properties:
        date_added:
          type: string
          format: date
          description: The date the timeline entry was added.
          example: 2020-01-01

    JournalEntryMutable:
      description: Mutable fields for a journal entry, which serves both like a notepad to the customer and as a possible line of communication from customer to coach.
      type: object
      properties:
        name:
          type: string
          description: The title of the journal entry.
          example: Me after one week
        body_html:
          type: string
          description: The body of the journal entry. This is the main content of the entry and is in HTML.
          example: Feeling good.
        private:
          type: boolean
          description: Whether the journal entry is private and not to be shared with coaches. If true, the entry can only be seen by the customer.
          example: true

    JournalEntry:
      description: Serves both like a notepad to the customer and as a possible line of communication from customer to coach.
      allOf:
        - "$ref": "#/components/schemas/JournalEntryMutable"
      type: object
      properties:
        date_added:
          type: string
          format: date
          description: The date the journal entry was added.
          example: 2020-01-01
        date_updated:
          type: string
          format: date
          description: The date the journal entry was last updated.
          example: 2020-01-02

    CheckInMutable:
      description: Mutable fields for a check-in's submission.
      type: object
      properties:
        sleep_was_good:
          type: boolean
          description: Whether the customer slept well.
          example: true
        sleep_was_good_why:
          type: string
          description: The reason why the customer slept didn't sleep well.
          example: I couldn't sleep.
          nullable: true
        fitness_followed_plans:
          type: boolean
          description: Whether the customer followed the fitness plans.
          example: true
        fitness_followed_plans_why:
          type: string
          description: The reason why the customer didn't follow the fitness plans.
          example: I didn't follow the plans.
          nullable: true
        fitness_ultimate_training_description:
          type: string
          description: Description of what training the customer did, only for ultimate members.
          example: I did some training.
          nullable: true
        nutrition_followed_plans:
          type: boolean
          description: Whether the customer followed the nutrition plans.
          example: true
        nutrition_followed_plans_why:
          type: string
          description: The reason why the customer didn't follow the nutrition plans.
          example: I didn't follow the plans.
          nullable: true
        nutrition_problems:
          type: string
          description: Any problems the customer had with nutrition.
          example: I had a problem.
          nullable: true
        nutrition_ultimate_daily_water_intake:
          type: integer
          format: int32
          description: The daily water intake the customer had in fl. oz., only for ultimate members.
          example: 500
        nutrition_ultimate_number_bowel_movements:
          type: integer
          format: int32
          description: The number of bowel movements the customer had, only for ultimate members.
          example: 5
        nutrition_ultimate_diet_plan_changes:
          type: string
          description: Any changes the customer made to the diet plan, only for ultimate members.
          example: I changed the plan.
          nullable: true
        nutrition_ultimate_supplements:
          type: string
          description: Any supplements the customer took, only for ultimate members.
          example: I took supplements.
          nullable: true
        other_comments:
          type: string
          description: Any other comments the customer had.
          example: I had a comment.
          nullable: true

    CheckIn:
      description: A check-in, where a customer sends their coach workout and nutrition progress information.
      allOf:
        - "$ref": "#/components/schemas/CheckInMutable"
      type: object
      properties:
        check_in_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the check-in.
        datetime_added:
          type: string
          format: date-time
          description: The date the check-in was added.
          example: 2020-01-01T00:00:00+00:00
        datetime_updated:
          type: string
          format: date-time
          description: The date the check-in was last updated.
          example: 2020-01-01T00:00:00+00:00
        reviewed_by:
          type: array
          description: The user IDs of the coaches who reviewed the check-in.
          items:
            type: integer
            format: int32

    MessageMutable:
      description: Mutable fields for message from/to a coach.
      type: object
      properties:
        body:
          type: string
          description: The body of the message.
          example: This is the message body.
        sender_id:
          type: string
          description: The ID of the sender. If the sender is a coach, then the ID is in the format u{user ID}. If the sender is a customer, then the ID is in the format c{customer ID}.
          example: u1
        recipient_ids:
          type: array
          description: The IDs of the recipients. If the recipient is a coach, then the ID is in the format u{user ID}. If the recipient is a customer, then the ID is in the format c{customer ID}.
          items:
            type: string
          example: ["u1", "u2"]

    Message:
      description: A message from/to a coach.
      allOf:
        - "$ref": "#/components/schemas/MessageMutable"
      type: object
      properties:
        message_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the message.
        is_read:
          type: boolean
          description: Whether the message has been read.
          example: true
        datetime_added:
          type: string
          format: date-time
          description: The date the message was added.
          example: 2020-01-01T00:00:00+00:00

    User:
      description: A user/coach.
      type: object
      properties:
        user_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the user.
        first_name:
          type: string
          description: The first name of the user.
          example: John
        last_name:
          type: string
          description: The last name of the user.
          example: Doe
        coach_name:
          type: string
          description: The name of the coach.
          example: John Doe

    # ##########################################
    # Products and orders
    # ##########################################

    Product:
      description: A store product.
      type: object
      allOf:
        - "$ref": "#/components/schemas/ProductDescription"
      properties:
        product_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the product.
        master_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The parent product's ID.
        model:
          type: string
          description: The model of the product.
          example: Basic Workout (1 month)
        sku:
          type: string
          description: The stock keeping unit of the product.
          example: 306
        upc:
          type: string
          description: The universal product code of the product.
          example: 1234567890123
        ean:
          type: string
          description: The european article number of the product.
          example: 1234567890123
        jan:
          type: string
          description: The japanese article number of the product.
          example: 1234567890123
        isbn:
          type: string
          description: The international standard book number of the product.
          example: 1234567890123
        mpn:
          type: string
          description: The manufacturer part number of the product.
          example: 1234567890123
        location:
          type: string
          description: The location of the product.
          example: United States
        variant:
          type: string
          description: The variant of the product.
          example: Red
        override:
          type: string
          description: The override of the product. Unused?
        stock_status:
          type: string
          description: The stock status of the product.
          example: In Stock
        image_url:
          type: string
          description: URL of the main image of the product.
          example: https://example.com/image.jpg
        price:
          type: string
          description: The price of the product. Formatted as a decimal number as a string for precision. Four decimal places are used.
          example: "10.0000"
        points:
          type: integer
          format: int32
          description: How many points a customer receives for purchasing the product.
        tax_class:
          type: string
          description: The tax class of the product.
        date_available:
          type: string
          format: date
          description: The date the product is available.
        weight:
          type: string
          description: The weight of the product. Formatted as a decimal number as a string for precision. Eight decimal places are used.
          example: "10.00000000"
        weight_class:
          type: string
          description: The weight class of the product.
          example: Kilogram
        length:
          type: string
          description: The length of the product. Formatted as a decimal number as a string for precision. Eight decimal places are used.
          example: "10.00000000"
        width:
          type: string
          description: The width of the product. Formatted as a decimal number as a string for precision. Eight decimal places are used.
          example: "10.00000000"
        height:
          type: string
          description: The height of the product. Formatted as a decimal number as a string for precision. Eight decimal places are used.
          example: "10.00000000"
        length_class:
          type: string
          description: The length class of the product.
          example: Meter
        minimum:
          type: integer
          format: int32
          description: The minimum order quantity of the product.
        sort_order:
          type: integer
          format: int32
          description: The sort order of the product.
        viewed:
          type: integer
          format: int32
          description: The number of times the product has been viewed.
        description:
          type: object
          $ref: "#/components/schemas/ProductDescription"
        options:
          type: array
          items:
            $ref: "#/components/schemas/ProductOption"
        datetime_added:
          type: string
          format: date-time
          description: The date the product was added.
          example: 2020-01-01T00:00:00+00:00
        datetime_updated:
          type: string
          format: date-time
          description: The date the product was last updated.
          example: 2020-01-01T00:00:00+00:00

    ProductDescription:
      description: A product description for a language. By default English is used. An alternate language can be supplied via a header.
      type: object
      properties:
        language:
          type: string
          description: The language code of the product description.
          example: en-gb
        name:
          type: string
          description: The name of the product.
          example: Basic Workout (1 month)
        body_html:
          type: string
          description: The body of the product.
          example: <p>This is the product body.</p>
        tag:
          type: string
          description: The tags of the product.
          example: workout, basic
        meta_title:
          type: string
          description: The meta title of the product.
          example: Basic Workout (1 month)
        meta_description:
          type: string
          description: The meta description of the product.
          example: This is the product meta description.
        meta_keyword:
          type: string
          description: The meta keywords of the product.
          example: basic, workout, 1 month

    ProductOption:
      description: A product option.
      type: object
      properties:
        product_option_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the option.
        value:
          type: string
          description: The value of the option.
          example: Red
        required:
          type: boolean
          description: Whether the option is required.
          example: true
        option_value:
          type: object
          description: The product values of the option.
          $ref: "#/components/schemas/ProductOptionValue"
        option:
          type: object
          description: The option.
          allOf:
            - "$ref": "#/components/schemas/Option"

    ProductOptionValue:
      description: A product option value.
      type: object
      properties:
        product_option_value_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the option.
        quantity:
          type: integer
          format: int32
          description: The quantity of the option value.
          example: 1
        price:
          type: string
          description: The price of the option value. Formatted as a decimal number as a string for precision. Four decimal places are used.
          example: "10.0000"
        price_prefix:
          type: string
          description: The price prefix of the option value.
          example: +
        points:
          type: integer
          format: int32
          description: The points of the option value.
          example: 1
        points_prefix:
          type: string
          description: The points prefix of the option value.
          example: +
        weight:
          type: string
          description: The weight of the option value. Formatted as a decimal number as a string for precision. Eight decimal places are used.
          example: "10.00000000"
        weight_prefix:
          type: string
          description: The weight prefix of the option value.
          example: +

    Download:
      description: A download that is added to a virtual product.
      type: object
      properties:
        download_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the download.
        name:
          type: string
          description: The name of the download.
          example: Ebook
        url:
          type: string
          description: The URL of the download.
          example: https://example.com/ebook.pdf

    Option:
      description: An option.
      type: object
      properties:
        option_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the option.
        type:
          type: string
          description: The type of the option.
          example: select
        sort_order:
          type: integer
          format: int32
          description: The sort order of the option.
          example: 1
        description:
          type: object
          $ref: "#/components/schemas/OptionDescription"
        values:
          type: array
          description: The values of the option.
          items:
            "$ref": "#/components/schemas/OptionValue"
      allOf:
        - "$ref": "#/components/schemas/OptionDescription"

    OptionDescription:
      description: An option description for a language. By default English is used. An alternate language can be supplied via a header.
      type: object
      properties:
        language:
          type: string
          description: The language code of the option description.
          example: en-gb
        name:
          type: string
          description: The name of the option.
          example: Size

    OptionValue:
      description: An option value.
      type: object
      properties:
        option_value_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the option.
        image_url:
          type: string
          description: The URL image of the option value.
          example: https://example.com/image.jpg
        sort_order:
          type: integer
          format: int32
          description: The sort order of the option value.
          example: 1
        description:
          type: object
          $ref: "#/components/schemas/OptionValueDescription"

    OptionValueDescription:
      description: An option value description for a language. By default English is used. An alternate language can be supplied via a header.
      type: object
      properties:
        language:
          type: string
          description: The language code of the option value description.
          example: en-gb
        name:
          type: string
          description: The name of the option value.
          example: Small

    Order:
      description: An order.
      type: object
      properties:
        order_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the order.
        invoice_no:
          type: string
          description: The invoice number of the order.
          example: 12345
        invoice_prefix:
          type: string
          description: The invoice prefix of the order.
          example: INV-
        store_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the store.
        store_name:
          type: string
          description: The name of the store.
          example: Example Store
        store_url:
          type: string
          description: The URL of the store.
          example: https://example.com
        first_name:
          type: string
          description: The first name of the customer.
          example: John
        last_name:
          type: string
          description: The last name of the customer.
          example: Doe
        email:
          type: string
          description: The email of the customer.
          example:
        telephone:
          type: string
          description: The telephone of the customer.
          example: +15555555555
        fax:
          type: string
          description: The fax of the customer.
          example: +15555555555
        payment:
          type: object
          description: The payment details of the order.
          allOf:
            - "$ref": "#/components/schemas/Address"
          properties:
            custom_field:
              type: string
              description: Other data to attach to the payment.
              example: "{}"
            method:
              type: string
              description: The method of the payment.
              example: bank_transfer
            code:
              type: string
              description: The code of the payment.
              example: 12345
        shipping:
          type: object
          description: The shipping details of the order.
          allOf:
            - "$ref": "#/components/schemas/Address"
          properties:
            custom_field:
              type: string
              description: Other data to attach to the shipping.
              example: "{}"
            method:
              type: string
              description: The method of the shipping.
              example: flat
            code:
              type: string
              description: The code of the shipping.
              example: 12345
        comment:
          type: string
          description: The comment of the order.
          example: This is a comment.
        total:
          type: string
          description: The total of the order. Formatted as a decimal number as a string for precision. Four decimal places are used.
          example: "10.0000"
        order_status:
          type: string
          description: The status of the order.
          example: pending
        tracking:
          type: string
          description: The tracking of the order.
          example: 12345
        currency_code:
          type: string
          description: The currency code of the order.
          example: USD
        currency_value:
          type: string
          description: The currency value of the order. Formatted as a decimal number as a string for precision. Eight decimal places are used.
          example: "10.00000000"
        histories:
          type: array
          description: The histories of the order.
          items:
            allOf:
              - "$ref": "#/components/schemas/OrderHistory"
        options:
          type: array
          description: The options of the order.
          items:
            allOf:
              - "$ref": "#/components/schemas/OrderOption"
        products:
          type: array
          description: The products of the order.
          items:
            allOf:
              - "$ref": "#/components/schemas/OrderProduct"
        recurrings:
          type: array
          description: The recurrings of the order.
          items:
            allOf:
              - "$ref": "#/components/schemas/OrderRecurring"

    OrderHistory:
      description: An order history entry.
      type: object
      properties:
        order_history_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the order history.
        order_status:
          type: string
          description: The order status.
          example: complete
        notify:
          type: boolean
          description: Whether the customer should be notified.
          example: true
        comment:
          type: string
          description: The comment for the order history.
          example: This is the order history comment.
        datetime_added:
          type: string
          format: date-time
          description: The date the order history was added.
          example: 2020-01-01T00:00:00+00:00

    OrderOption:
      description: An order option.
      type: object
      properties:
        order_option_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the order option.
        product_option:
          type: object
          description: The product option.
          allOf:
            - "$ref": "#/components/schemas/ProductOption"
        name:
          type: string
          description: The name of the option.
          example: Size
        value:
          type: string
          description: The value of the option.
          example: Small
        type:
          type: string
          description: The type of the option.
          example: select

    OrderProduct:
      description: An order product. Differs from a product in that it "freezes" the product and its attributes at the time of the order.
      type: object
      properties:
        order_product_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the order product.
        name:
          type: string
          description: The name of the order product.
          example: Basic Workout
        model:
          type: string
          description: The model of the order product.
          example: Basic Workout (1 month)
        quantity:
          type: integer
          format: int32
          description: The quantity of the order product.
          example: 1
        price:
          type: string
          description: The price of the order product. Formatted as a decimal number as a string for precision. Four decimal places are used.
          example: "10.0000"
        total:
          type: string
          description: The total of the order product. Formatted as a decimal number as a string for precision. Four decimal places are used.
          example: "10.0000"
        tax:
          type: string
          description: The tax of the order product. Formatted as a decimal number as a string for precision. Four decimal places are used.
          example: "10.0000"
        reward:
          type: integer
          format: int32
          description: The reward points of the order product.
          example: 100

    OrderRecurring:
      description: A recurring profile for an order.
      type: object
      properties:
        order_recurring_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the order recurring.
        reference:
          type: string
          description: The reference of the recurring profile.
          example: 1234567890123
        product:
          type: object
          description: The product of the recurring profile.
          allOf:
            - "$ref": "#/components/schemas/Product"
        product_name:
          type: string
          description: The name of the product.
          example: Basic Workout (1 month)
        product_quantity:
          type: integer
          format: int32
          description: The quantity of the product.
          example: 1
        recurring_name:
          type: string
          description: The name of the recurring profile.
          example: Basic Workout (1 month)
        recurring_description:
          type: string
          description: The description of the recurring profile.
          example: Basic Workout (1 month)
        recurring_frequency:
          type: string
          description: The time unit of the recurring profile.
          example: month
        recurring_cycle:
          type: integer
          format: int32
          description: The number of time units until this is expected to charge again.
          example: 1
        recurring_duration:
          type: integer
          format: int32
          description: The number of cycles until this recurring profile ends.
          example: 12
        recurring_price:
          type: string
          description: The price of the recurring profile. Formatted as a decimal number as a string for precision. Four decimal places are used.
          example: "10.0000"
        has_trial:
          type: boolean
          description: Whether the recurring profile has a trial period.
          example: true
        trial_frequency:
          type: string
          description: The time unit of the trial period.
          example: month
        trial_cycle:
          type: integer
          format: int32
          description: The number of time units until this is expected to charge again.
          example: 1
        trial_duration:
          type: integer
          format: int32
          description: The number of cycles until this recurring profile ends.
          example: 1
        trial_price:
          type: string
          description: The price of the trial period. Formatted as a decimal number as a string for precision. Four decimal places are used.
          example: "0.0000"
        datetime_added:
          type: string
          format: date-time
          description: The date the recurring profile was added.
          example: 2020-01-01T00:00:00+00:00

    OrderRecurringTransaction:
      description: A recurring transaction for an order.
      type: object
      properties:
        order_recurring_transaction_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the recurring transaction.
        reference:
          type: string
          description: The reference for the recurring transaction.
        type:
          type: string
          description: The type of the recurring transaction.
          example: payment
        amount:
          type: string
          description: The amount of the recurring transaction. Formatted as a decimal number as a string for precision. Four decimal places are used.
          example: "10.0000"
        datetime_added:
          type: string
          format: date-time
          description: The date the recurring transaction was added.
          example: 2020-01-01T00:00:00+00:00

    OrderShipment:
      description: A shipment for an order.
      type: object
      properties:
        order_shipment_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the shipment.
        datetime_added:
          type: string
          format: date-time
          description: The date the shipment was added.
          example: 2020-01-01T00:00:00+00:00
        shipping_courier:
          type: string
          description: The shipping courier of the shipment.
          example: UPS
        shipping_tracking_number:
          type: string
          description: The shipping tracking number of the shipment.
          example: 123456789

    CategoryDescription:
      description: A description of a category.
      type: object
      properties:
        category_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the associated category.
        language_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the language.
        title:
          type: string
          description: The title of the category.
          example: Workout Plans
        body:
          type: string
          description: The body of the category.
          example: Workout plans description.
        meta_title:
          type: string
          description: The meta title of the category.
          example: Workout Plans
        meta_description:
          type: string
          description: The meta description of the category.
          example: Workout plans description.
        meta_keywords:
          type: string
          description: The meta keywords of the category.
          example: workout, plans, description

    Category:
      description: A category.
      type: object
      allOf:
        - "$ref": "#/components/schemas/HasThumbnails"
      properties:
        category_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the category.
        parent_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the parent category.
        top:
          type: boolean
          description: Whether the category is at the top level.
          example: true
        column:
          type: integer
          format: int32
          description: The column of the category.
          example: 1
        sort_order:
          type: integer
          format: int32
          description: The sort order of the category.
          example: 1
        description:
          type: object
          $ref: "#/components/schemas/CategoryDescription"
        datetime_added:
          type: string
          format: date-time
          description: The date the category was added.
          example: 2020-01-01T00:00:00+00:00
        datetime_updated:
          type: string
          format: date-time
          description: The date the category was modified.
          example: 2020-01-01T00:00:00+00:00

    InformationDescription:
      description: A description of an information.
      type: object
      properties:
        information_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the associated information.
        language_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the language.
        title:
          type: string
          description: The title of the information.
          example: About Us
        body:
          type: string
          description: The body of the information.
          example: About us description.
        title_html:
          type: string
          description: The title of the information with HTML tags.
          example: About Us
        body_html:
          type: string
          description: The body of the information with HTML tags.
          example: About us description.
        meta_title:
          type: string
          description: The meta title of the information.
          example: About Us
        meta_description:
          type: string
          description: The meta description of the information.
          example: About us description.
        meta_keywords:
          type: string
          description: The meta keywords of the information.
          example: about, us, description

    Information:
      description: A description of an information.
      type: object
      properties:
        information_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the associated information.
        bottom:
          type: boolean
          description: Whether the information is at the bottom of the page.
          example: true
        sort_order:
          type: integer
          format: int32
          description: The sort order of the information.
          example: 1
        description:
          type: object
          $ref: "#/components/schemas/InformationDescription"

    Review:
      description: A review.
      type: object
      properties:
        review_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the review.
        product_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the associated product.
        customer_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the associated customer.
        author:
          type: string
          description: The author of the review.
          example: John Doe
        body:
          type: string
          description: The body of the review.
          example: Review body.
        rating:
          type: integer
          format: int32
          description: The rating of the review.
          minimum: 1
          maximum: 5
          example: 5
        datetime_added:
          type: string
          format: date-time
          description: The date the review was added.
          example: 2020-01-01T00:00:00+00:00
        datetime_updated:
          type: string
          format: date-time
          description: The date the review was modified.
          example: 2020-01-01T00:00:00+00:00

    # ##########################################
    # Checkout and cart
    # ##########################################

    CartMutable:
      description: A mutable cart row.
      type: object
      required:
        - product_id
        - recurring_id
        - quantity
      properties:
        product_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the product.
        recurring_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the recurring profile.
        option:
          type: string
          description: The options for the product.
        quantity:
          type: integer
          format: int32
          description: The quantity of the product.
          example: 1

    Cart:
      description: A cart row.
      type: object
      properties:
        cart_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the cart.
        datetime_added:
          type: string
          format: date-time
          description: The date the product was added.
          example: 2020-01-01T00:00:00+00:00

    # ##########################################
    # Workouts
    # ##########################################

    WOD:
      description: A workout of the day.
      type: object
      allOf:
        - "$ref": "#/components/schemas/HasThumbnails"
      properties:
        assignment_group_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the assignment group.
        title:
          type: string
          description: The title of the workout.
          example: Global workout of the day
        body:
          type: string
          description: The body of the workout.
          example: Global workout of the day details
        workouts:
          type: array
          description: The workouts of the workout.
          items:
            allOf:
              - "$ref": "#/components/schemas/Workout"
        meal_plans:
          type: array
          description: The meal plans of the WOD.
          items:
            allOf:
              - "$ref": "#/components/schemas/MealPlan"

    Workout:
      description: A workout. Typically is something that you complete in one session and only once per day or couple of days.
      type: object
      allOf:
        - "$ref": "#/components/schemas/HasThumbnails"
      properties:
        workout_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the workout.
        title:
          type: string
          description: The title of the workout.
          example: Arms day
        exercises:
          type: array
          description: The exercises of the workout.
          items:
            $ref: "#/components/schemas/Exercise"
        access_restrictions:
          allOf:
            - "$ref": "#/components/schemas/AccessRestrictions"
        datetime_added:
          type: string
          format: date-time
          description: The date the workout was added.
          example: 2020-01-01T00:00:00+00:00
        datetime_updated:
          type: string
          format: date-time
          description: The date the workout was updated.
          example: 2020-01-01T00:00:00+00:00

    Exercise:
      description: An exercise. A part of a workout.
      type: object
      allOf:
        - "$ref": "#/components/schemas/HasThumbnails"
      properties:
        exercise_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the exercise.
        title:
          type: string
          description: The title of the exercise.
          example: Pushups
        body_html:
          type: string
          description: The body of the exercise.
          example: Pushups details
        focus:
          type: string
          description: The focus of the exercise.
          example: arms
        author:
          type: object
          description: The author of the exercise.
          allOf:
            - "$ref": "#/components/schemas/User"
        reps_sets:
          type: array
          description: The reps and sets of the exercise.
          items:
            type: object
            allOf:
              - "$ref": "#/components/schemas/RepSetPair"
        completed:
          type: boolean
          description: Whether the exercise is completed.
          nullable: true
          example: true
        video:
          type: object
          description: Video information for the exercise.
          nullable: true
          allOf:
            - "$ref": "#/components/schemas/Video"
        access_restrictions:
          nullable: true
          allOf:
            - "$ref": "#/components/schemas/AccessRestrictions"
        datetime_added:
          type: string
          format: date-time
          description: The date the exercise was added.
          example: 2020-01-01T00:00:00+00:00
        datetime_updated:
          type: string
          format: date-time
          description: The date the exercise was updated.
          example: 2020-01-01T00:00:00+00:00

    RepSetPair:
      description: A rep set pair.
      type: object
      properties:
        reps:
          type: string
          description: The number of reps. Can be a number, range, or short description.
          example: 10
        sets:
          type: string
          description: The number of sets or groups of reps to accomplish. Can be a number, range, or short description.
          example: 3
        title:
          type: string
          description: The title of the rep set pair, which is used to group similar rep-set combos.
          example: Beginner
        body:
          type: string
          description: Short description for the pair.
          example: Do as many as you can.
        order:
          type: integer
          format: int32
          description: The order of the rep set pair within other pairs.

    # ##########################################
    # Meals
    # ##########################################

    Nutrients:
      type: object
      description: The nutrition facts for a meal or ingredient.
      properties:
        calories:
          type: integer
          format: int32
          description: The total calories in kcal.
          example: 100
        total_fat:
          type: integer
          format: int32
          description: The total fat in grams.
          example: 10
        saturated_fat:
          type: integer
          format: int32
          description: The total saturated fat in grams.
          example: 5
        carbohydrates:
          type: integer
          format: int32
          description: The total carbohydrates in grams.
          example: 20
        sugar:
          type: integer
          format: int32
          description: The total sugar in grams.
          example: 10
        protein:
          type: integer
          format: int32
          description: The total protein in grams.
          example: 5
        sodium:
          type: integer
          format: int32
          description: The total sodium in milligrams.
          example: 100

    Ingredient:
      type: object
      description: A component of a meal. Can be reused across meals.
      allOf:
        - "$ref": "#/components/schemas/Nutrients"
      properties:
        ingredient_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the ingredient.
        title:
          type: string
          description: The title of the ingredient.
          example: Carrot
        calories:
          description: The calories of the ingredient in kcal.
        total_fat:
          description: The fat of the ingredient in grams.
        saturated_fat:
          description: The saturated fat of the ingredient in grams.
        carbohydrates:
          description: The carbohydrates of the ingredient in grams.
        sugar:
          description: The sugar of the ingredient in grams.
        protein:
          description: The protein of the ingredient in grams.
        sodium:
          description: The sodium of the ingredient in milligrams.
        datetime_added:
          type: string
          format: date-time
          description: The date the ingredient was added to the database (not necessarily a meal).
          example: 2020-01-01T00:00:00+00:00

    Meal:
      type: object
      description: A meal plan consisting of zero or more ingredients and optionally attached videos.
      allOf:
        - "$ref": "#/components/schemas/HasThumbnails"
      properties:
        meal_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the meal.
        title:
          type: string
          description: The title of the meal.
          example: Carrot and cheese
        body_html:
          type: string
          description: The body of the meal.
          example: Carrot and cheese details
        servings:
          type: integer
          format: int32
          description: The number of servings of the meal.
          example: 2
        nutrition_total:
          type: object
          description: The nutrition information for the entire meal.
          allOf:
            - "$ref": "#/components/schemas/Nutrients"
        nutrition_per_serving:
          type: object
          description: The nutrition of the meal for a single serving.
          allOf:
            - "$ref": "#/components/schemas/Nutrients"
        ingredients:
          type: array
          description: The ingredients of the meal.
          nullable: true
          items:
            $ref: "#/components/schemas/Ingredient"
        videos:
          type: array
          description: The videos of the meal.
          nullable: true
          items:
            type: object
            allOf:
              - "$ref": "#/components/schemas/Video"
        access_restrictions:
          allOf:
            - "$ref": "#/components/schemas/AccessRestrictions"
        datetime_added:
          type: string
          format: date-time
          description: The date and time the meal was added to the database.
          example: 2020-01-01T00:00:00+00:00
        datetime_updated:
          type: string
          format: date-time
          description: The date and time the meal was updated.
          example: 2020-01-01T00:00:00+00:00

    MealPlan:
      type: object
      description: A meal plan consisting of one or more meals and optionally attached videos.
      allOf:
        - "$ref": "#/components/schemas/HasThumbnails"
      properties:
        meal_plan_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the meal plan.
        title:
          type: string
          description: The title of the meal plan.
          example: Carrot and cheese
        meals:
          type: array
          description: The meals in the meal plan.
          nullable: true
          items:
            $ref: "#/components/schemas/Meal"
        videos:
          type: array
          description: The videos of the meal plan.
          nullable: true
          items:
            type: object
            allOf:
              - "$ref": "#/components/schemas/Video"
        access_restrictions:
          allOf:
            - "$ref": "#/components/schemas/AccessRestrictions"
        datetime_added:
          type: string
          format: date-time
          description: The date and time the meal plan was added to the database.
          example: 2020-01-01T00:00:00+00:00
        datetime_updated:
          type: string
          format: date-time
          description: The date and time the meal plan was updated.
          example: 2020-01-01T00:00:00+00:00

    # ##########################################
    # Videos
    # ##########################################

    Video:
      type: object
      description: A watchable resource.
      allOf:
        - "$ref": "#/components/schemas/HasThumbnails"
      properties:
        video_id:
          allOf:
            - "$ref": "#/components/schemas/SystemID"
          description: The internal ID for the video.
        title:
          type: string
          description: The title of the video.
          example: A video
        body:
          type: string
          description: The body of the video.
          example: A video details
        access_restrictions:
          allOf:
            - "$ref": "#/components/schemas/AccessRestrictions"
          nullable: true
        video_url:
          type: string
          description: The URL of the video. May be null if the video can only be played via some other source.
          nullable: true
          example: https://example.com/video.mp4

    # ##########################################
    # Request- and response-specific
    # ##########################################

    CustomerModel:
      type: object
      "$ref": "#/components/schemas/DataModel"
      required:
        - data
      properties:
        data:
          "$ref": "#/components/schemas/Customer"

    DataModel:
      type: object
      required:
        - success
      properties:
        success:
          type: boolean
          description: Whether the request was successful.
          example: true

    ErrorsModel:
      nullable: true
      type: object
      required:
        - code
        - message
      allOf:
        - $ref: "#/components/schemas/DataModel"
        - $ref: "#/components/schemas/ErrorModel"
      properties:
        success:
          type: boolean
          description: Whether the request was successful.
          example: false
        errors:
          nullable: true
          type: array
          items:
            $ref: "#/components/schemas/ErrorModel"

    ErrorModel:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: The error code.
          example: 123
        message:
          type: string
          description: The error message.
          example: An error occurred.

  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: X-Api-Key
      description: Authentication via API key or token sent in header.
    httpBasic:
      type: http
      scheme: basic
      description: Authentication via username and password. Not recommended; API key-based authentication is preferred.

security:
  - httpBasic: []
    apiKey: []
